name: semRelease

on:
  push:
    branches:
      - main

jobs:
  semRelease:
    runs-on: ubuntu-latest
    steps: 
      - uses: actions/checkout@v4
        with: 
          token: ${{ secrets.GIT_TOKEN }}
      
      - name: Setup git 
        run: |
          git config user.name "Github actions"
          git config user.email "github.action@github.com"

      - name: get latest tag 
        run: |
          git fetch --tags
          last_tag=$(git describe --tags $(git rev-list --tags --max-count=1) 2>/dev/null || echo "v0.0.0") 
          echo "LAST_TAG=$last_tag" >> $GITHUB_ENV
      - name: analyze commits
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          VERSION_CLEANED=${LAST_TAG:1}

          PATCH_PART=$(echo "$VERSION_CLEANED" | cut -d . -f 3)

          MINOR_PART=$(echo "$VERSION_CLEANED" | cut -d . -f 2)

          MAJOR_PART=$(echo "$VERSION_CLEANED" | cut -d . -f 1)

          if [[ "$COMMIT_MSG" == *"fix"* ]]; then
            PATCH_PART=$((PATCH_PART+1))
          
          elif [[ "$COMMIT_MSG" == *"feat"* ]]; then
            MINOR_PART=$((MINOR_PART+1))
            PATCH_PART=0
          
          elif [[ "$COMMIT_MSG" == *"breakingChange"* ]]; then
            MAJOR_PART=$((MAJOR_PART+1))
            MINOR_PART=0
            PATCH_PART=0
          fi

          nv="v$MAJOR_PART.$MINOR_PART.$PATCH_PART"
          echo "NEW_VERSION=$nv" >> $GITHUB_ENV
      - name: Create new tag
        run: |
          if [[ "$NEW_VERSION" != "" ]]; then
            git tag "$NEW_VERSION"
            git push origin "$NEW_VERSION"
          fi
      - name: display new version
        run: |
          if [[ "$NEW_VERSION" != "" ]]; then
            echo "New version is $NEW_VERSION"
          else 
            echo "Ce commit n’a pas conduit à un tag"
          fi

            

